%% LyX 2.3.1 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass[11pt,letterpaper,english]{extarticle}
\usepackage{lmodern}
\renewcommand{\sfdefault}{lmss}
\usepackage{libertineMono}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\setlength{\parskip}{\medskipamount}
\setlength{\parindent}{0pt}
\usepackage{babel}
\usepackage[authoryear]{natbib}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=false,bookmarksopen=false,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}

\makeatletter

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% LyX specific LaTeX commands.
\special{papersize=\the\paperwidth,\the\paperheight}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Textclass specific LaTeX commands.
<<echo=F>>=
  if(exists(".orig.enc")) options(encoding = .orig.enc)
@
\providecommand*{\code}[1]{\texttt{#1}}

\@ifundefined{date}{}{\date{}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
%\VignetteIndexEntry{semtable}
%\VignetteEngine{Sweave}
%\VignetteBuilder{stationery::rnw2pdf}
%\usepackage{Sweave}% Following comment is required. Do not delete it.

\usepackage[includehead,includefoot]{geometry}
\geometry{
lmargin=1in,
rmargin=1in,
tmargin=0.75in,
bmargin=1.0in,
headheight=0pt,
headsep=0pt,
marginparwidth=0pt,
footskip=1.5\baselineskip,
}

\usepackage{booktabs}
\usepackage{dcolumn}
\usepackage{longtable}
\usepackage{siunitx}
\usepackage{textcomp}
\usepackage{upquote}

\input{theme/guidePreambleHeader.tex}
\input{theme/preambleFooter.tex}
\input{theme/guidePreambleSweavel.tex}

\makeatother

\usepackage{listings}
\renewcommand{\lstlistingname}{\inputencoding{latin9}Listing}

\begin{document}
%% Fill in values of the arguments here, 
%% If blanks are needed, insert tilde " ~ " to make sure they are respected
%% If comma needed inside a value, wrap in {}.
%% Delete secondauthor and thirdauthor if not needed
\guidesetup{%
  author={
    lastname=Johnson, 
    firstname=Paul~E., 
    affiliation=CRMDA{, University of Kansas},
    email=pauljohn@ku.edu},
  author={
    lastname=Kite, 
    firstname=Benjamin, 
    affiliation=CRMDA and H\&R Block, 
    email=bakite@ku.edu}, 
  url={https://crmda.ku.edu/guides},
  keywords={Structural Equation Models, LaTeX Tables, HTML Tables},
  title={SEM Tables with the semTable package for R},
  leftlogo={theme/logoleft.pdf},
  rightlogo={theme/logo-vert.pdf},
  number=50,
}
\guidehdr

\input{addressFooter.tex}

<<texcopy, include=FALSE,echo=FALSE,results=hide>>=
if(!dir.exists("theme")) dir.create("theme")
library(stationery)
## If theme directory does not have required images or TeX files
## we need to retrieve them and put them in "theme" directory. 
texfiles <- c("guidePreambleHeader.tex", "guidePreambleSweavel.tex", "preambleFooter.tex")
getFiles(texfiles, pkg = "stationery")
logos <- c("logoleft.pdf", "logo-vert.pdf")
## This will retrieve logo files from a designated package:
try(getFiles(logos, pkg = "crmda", overwrite = FALSE))
## If you do not have a file after that, 
## the following will manufacture a blank images for placeholders
if(!file.exists("theme/logoleft.pdf")){
  blankPDF(file = "theme/logoleft.pdf", height=1.2, width=1.2, messg = "")
}
if(!file.exists("theme/logo-vert.pdf")){
  blankPDF(file = "theme/logo-vert.pdf", height=2, width=1.5, messg = "")
}
@

% Please leave this code
<<ignoremeRsetup, echo=FALSE, include=FALSE, results=hide>>=
tdir <- "tmpout"
if(!dir.exists(tdir)) dir.create(tdir, showWarnings=FALSE)
opts.orig <- options()
options(width=80, prompt=" ", continue="  ")
options(useFancyQuotes = FALSE) 
set.seed(12345)
par.orig <- par(no.readonly=TRUE)
options(SweaveHooks=list(fig=function() par(ps=10)))
pdf.options(onefile=FALSE,family="Times",pointsize=10)
@
\fvset{listparameters={\setlength{\topsep}{0em}}}
\SweaveOpts{prefix.string=tmpout/t, split=FALSE, ae=FALSE, height=4, width=6}

%The listings class used here allows within-document style.
%See the instructions file for details and examples. One can alter R input and 
%output, changing the size and color (foreground or background) 
%with statements like this:
%\def\Rsize{\huge\ttfamily}
\begin{abstract}
\noindent The \code{semTable} package features functions for preparing
report tables for estimates of structural equation models fitted with\code{ lavaan}
\citep{Rosseel-2012}. This essay discusses the usage of the \code{semTable}
function and provides a profuse collection of output examples. 
\end{abstract}
\tableofcontents{}

\section{semTable}

The \code{semTable} function is the featured offering of the \code{semTable}
package for R \citep{RCore}. This function allows authors who estimate
structural equation models (SEM) with the lavaan package for R to,
more-or-less automatically, generate acceptable tabular summaries
for reports and presentations. \code{semTable} has been offered as
a part of the \code{kutils} package in the past, but we believe it
is sufficiently well developed that it can stand on its own. As soon
as \code{semTable} is accepted on CRAN, this function will be removed
from \code{kutils}. The \code{semTable} package also includes a
function called \code{modelComparison}, which can assemble a standard
format for a ``diff'' test result for structural equation models.
That function is considerably less elaborate than \code{semTable}.

.

\section{Important Parameters}
\begin{description}
\item [{object:}] A fitted lavaan model object or a list with one or more
SEM fitted lavaan model objects. We suggest providing ``pretty names''
for inclusion in the final report, as in \code{list(\textquotedbl Model A\textquotedbl{} = obj1,}
\code{\textquotedbl Model B\textquotedbl{} = obj2)}. Results will
be side-by-side. Hint: take care to adjust the columns parameter to
make the results fit within the space allowed.
\item [{paramSets:}] Each fitted SEM may have many different parameter
sections. This argument can include any of the following: 

\code{c(\textquotedbl loadings\textquotedbl ,} \code{\textquotedbl slopes\textquotedbl ,}
\code{\textquotedbl intercepts\textquotedbl}, \code{\textquotedbl residualvariances\textquotedbl ,}
\code{\textquotedbl residualcovariances\textquotedbl ,} \code{\textquotedbl latentmeans\textquotedbl ,}
\code{\textquotedbl latentvariances\textquotedbl ,} \code{\textquotedbl latentcovariances\textquotedbl ,}
\code{\textquotedbl thresholds\textquotedbl ,} \code{\textquotedbl constructed\textquotedbl ,}
\code{\textquotedbl fits\textquotedbl )} The default is \code{\textquotedbl all\textquotedbl},
and the setting applies to all of the models in the fitted object
list.
\item [{paramSetLabels:}] This should be a named vector of ``pretty-printable''
labels for the parameter sets. It is not necessary to provide improved
labels for all \code{paramSets} items, but it is allowed to do so.
\item [{columns:}] choose the desired columns in the output. In the default
table in \code{lavaan} summaries, the columns are {[}``Estimate'',
``Std. Error'', ``Z'', and ``p''{]}. In our opinion, inclusion
of both the standard error and the Z is redundant and the p value
may not be necessary if significance stars are used. Hence we provide
alternatives to ``tighten up'' the result table. To specify columns,
the legal parameter values may be drawn from \code{c(\textquotedbl est\textquotedbl ,}
\code{\textquotedbl se\textquotedbl ,} \code{\textquotedbl z\textquotedbl ,}
\code{\textquotedbl p\textquotedbl ,} \code{\textquotedbl rsquare\textquotedbl ,}
\code{\textquotedbl estse\textquotedbl ,} \code{\textquotedbl eststars\textquotedbl ,}
\code{\textquotedbl estsestars\textquotedbl )}. The four new values
are the R-square for the item, a compact combined estimate and standard
errors (estse: ``1.2(0.02)''), with estimates with stars and no
standard errors (eststars: ``1.2{*}{*}'') or estimates with standard
errors in parentheses with ``significance stars'' (estsestars: ``1.2(0.02){*}{*}'').
Columns can differ between models, so a named list of vectors will
be accepted: \code{list(\textquotedbl Model A\textquotedbl{} = c(\textquotedbl est\textquotedbl ,
\textquotedbl se\textquotedbl ),} \code{\textquotedbl Model B\textquotedbl{} = c(\textquotedbl estse\textquotedbl ,
\textquotedbl p\textquotedbl ))}.
\item [{columnLabels:}] names list of ``presentable'' titles for columns
that authors prefer. Provide these names by parameter, not by model,
For example, any of these might be suitable: \code{est = \textquotedbl Estimate}\textquotedbl ,
\code{se = \textquotedbl Std. Err.\textquotedbl}, \code{z = \textquotedbl Z\textquotedbl},
\code{p = \textquotedbl p\textquotedbl}, \code{rsquare = \textquotedbl R Square\textquotedbl},
\code{estse = \textquotedbl Estimate(Std.Err.)\textquotedbl}. 
\item [{fits:}] selection of fit indices to include. The help page has
a partial list of these, but the lavaan estimator can generate additional
fit indicators for models of different types. This is the one part
of the semTable output that is likely to require some hand-editing
in order to be truly publication ready.
\item [{varLabels:}] Rather than R variable names, a truly polished table
needs presentable variable names. Provide a named vector of names
in the format ``orig.R.name'' = ``new.pretty.name''. See examples
below.
\item [{type:}] Can be \textquotedbl latex\textquotedbl , \textquotedbl html\textquotedbl{}
or \textquotedbl csv\textquotedbl . If a table object is created
with one format in mind, the object can be re-designated to a new
format. See examples in ``?semTable''. 
\item [{LaTeX~specific~arguments:}]~
\begin{description}
\item [{table.float:}] is an enclosing float table object required, or
should we simply make a tabular (or longtable) object.
\item [{longtable}] If longtable is true (probably preferred), use the
LaTeX class longtable. Otherwise tabular.
\item [{caption:}] title for the floating table, if table.float=TRUE. 
\item [{label:}] label to be used for internal cross-referencing.
\item [{centering:}] One of these \code{c(\textquotedbl siunitx\textquotedbl , \textquotedbl none\textquotedbl )}.
\end{description}
\item [{alpha:}] The levels of statistical significance to be used for
assigning starts (only needed if columns includes eststars or estsestars). 
\item [{file:}] This is a convenience function to save the results in a
separate file. It will add suffix \code{\textquotedbl .tex\textquotedbl},
\code{\textquotedbl .html\textquotedbl}, or \code{\textquotedbl .csv\textquotedbl},
depending on the value of type. This is the same as fitting a model
with \code{print.results = FALSE}, then \code{semTable} to produce
\code{object.tbl}, and then running \code{cat(object.tbl, file= \textquotedbl fn\textquotedbl )}
to save the result object in a file.
\end{description}
print.results: If FALSE, the results are not immediately displayed.
This is advantageous if an author wants to revise the marked-up table
results or control the point at which they are delivered in the documents.

\section{Confirmatory Factor Analysis}

<<ignoremeRsetup2, include=F, results=hide>>=
require(lavaan)
library(semTable)
tempdir <- "tmpout"
if(!dir.exists(tempdir)) dir.create(tempdir)
@

<<>>=
## The example from lavaan's docs
HS.model <- ' visual  =~ x1 + x2 + x3
              textual =~ x4 + x5 + x6
              speed   =~ x7 + x8 + x9
'
@

Because the SEM estimation can be time consuming, we will save a file
with the fitted model and re-use it if it is available when the vignette
is recompiled.

<<>>=
if(file.exists("fit1.rds")){
	fit1 <- readRDS("fit1.rds")
} else {
    fit1 <- cfa(HS.model, data = HolzingerSwineford1939,
            std.lv = TRUE, meanstructure = TRUE)
    saveRDS(fit1, "fit1.rds")
}
@

The ``raw'' output from the \code{lavaan} \code{summary} function
is as follows:

<<>>=
summary(fit1)
@

It is not necessary to specify a set of ``pretty'' variable labels,
but sometimes this makes for more pleasant tables. In this case, we
create a vector of labels first, and then put it to use. To prevent
the table from becoming too wide, we ask for two columns in the output,
\code{\textquotedbl estse\textquotedbl} and \code{\textquotedbl p\textquotedbl}.
The default \code{semTable} input would include a larger set of parameters,
but we don't need all of them. The default table includes latent intercepts
and latent variances, which are restricted to 0 and 1 by the model
itself, so it is not necessary to include them. Hence, we ask for
a smaller selection of parameter sets:

<<results=tex>>=
vlabs <- c("x1" = "Vis 1", "x2" = "Vis 2", x3 = "Vis 3", x4 = "Txt 1", x5 = "Txt 2", x6 = "Txt 3", x7 = "Speed 1", x8 = "Speed 2", x9 = "Speed 3")

fit1.t1 <- semTable(fit1, columns = c("estse", "p"), paramSets = c("loadings", "intercepts",  "residualvariances", "latentcovariances"), fits = c("chisq", "rmsea"), file = file.path(tempdir, "fit1.t1"), varLabels = vlabs, type = "latex",  table.float = TRUE, caption = "Holzinger Swineford CFA in a longtable Float", label = "tab:HS10", longtable=TRUE)
@

Because we have \code{longtable} set as TRUE, a floating table is
created with the indicated caption in Table \ref{tab:HS10}.

In the previous example, we allowed the LaTeX markup to be printed
directly into the document. There might be times when we would rather
delay the output. We might instead have set ``\code{print.results = FALSE}''
to prevent code display, and then at a time of our choosing we could
export the fitted model into the document with the cat function. 

<<eval=F, results=tex>>=
cat(fit1.t1)
@

Using the cat function, we also can export the table into a file:

<<eval=F>>=
fn <- file.path(tempdir, "fit1.t12.tex")
cat(fit1.t1, file = fn)
@

This is the same result obtained by specifying file name in the \code{semTable}
function itself. However, this latter approach leaves the door open
for the user to inspect \& edit the marked-up table.

\subsection*{Alternative Output Formats}

This function was developed primarily for LaTeX output tables. However,
we have redesigned so that the output may be requested in either Web
code (HTML) or comma separated variable (CSV) files. If HTML output
is desired, replace \code{type = \textquotedbl latex\textquotedbl}
with \code{type = \textquotedbl html\textquotedbl}.

<<HS10, eval=T, echo=T, results=hide>>=
fit1.t1h <- semTable(fit1, columns = c("estse", "p"), paramSets = c("loadings", "intercepts",  "residualvariances", "latentcovariances"),
                    fits = c("chisq", "rmsea"), file = file.path(tempdir, "fit1.t1h.html"),
                    varLabels = vlabs, type = "html", print.results = FALSE)
@

In an interactive session, the output file can be inspected on the
screen.

<<eval=F>>=
browseURL(file.path(tempdir, "fit1.t1.html"))
@

<<>>=
## Try CSV output next
fit1.t1c <- semTable(fit1, columns = c("estse", "p"),
                    fits = c("chisq", "rmsea"), file = file.path(tempdir, "fit1.t1c"),
                    varLabels = vlabs, type = "csv", print.results = FALSE)
## Go inspect this file with a spread sheet program:
attr(fit1.t1c, "file")
@

It is possible to change the output format of an \code{semTable}
object. This is done with the function \code{markupConvert}. Here
we demonstrate how to re-channel a LaTeX fitted table to a csv object:

<<>>=
fit1.t1c2 <- markupConvert(attr(fit1.t1, "markedResults"), type = "csv")
@

\section{To Float or Not to Float?}

In an academic paper, we would seldom/never have a table that prints
directly into the middle of the text. Instead, all tables are presented
a numbered ``floating'' table objects. The author has a choice to
ask \code{semTable} to create the floating table object (with indicated
caption and label), or to simply create the tabular object that would
be included inside the floated table in a following setup. The quick,
easy method of specifying the floating table elements in the semTable
command itself does not allow all of the flexibility that we might
want in controlling table output, so we'll illustrate both methods.

First, we have an ordinary table (not a \code{longtable}) that is
created as a float by the the reference label ``tab:hs1939'', as
seen in Table \ref{tab:fit1.t3}.

<<fit1.t3, results=tex>>=
## floating table
fit1.t3 <- semTable(fit1, columns = c("est", "se", "p"), paramSets = c("loadings"), fits = c("chisq", "rmsea"), file = file.path(tempdir, "fit1.t3"),                    varLabels = vlabs, longtable=FALSE, table.float = TRUE, caption = "Table Floated (not a longtable)", label = "tab:fit1.t3")
@

In Table \ref{tab:fit1.t4}, we have a similar table produced with
the \code{longtable} class. We have tested some alternative settings
for the columns (just to keep this interesting for the reader). Of
course, the benefit of a \code{longtable} is that a table that needs
to ``break'' across pages will do so, while an ordinary \code{tabular}
will run into the bottom margin. In this case, with a loadings-only
display, the table stays on the page and the \code{longtable} is
not strictly necessary. However, the \code{longtable} also does not
appear to be harmful even for small tables. Hence, we use \code{longtable = TRUE}
in most of our work.

<<fit1.t4, results=tex>>=
## floating longtable
fit1.t4 <- semTable(fit1, columns = c("est", "estsestars"), paramSets = c("loadings"), fits = c("chisq", "rmsea"), file = file.path(tempdir, "fit1.t4"), varLabels = vlabs, longtable = TRUE, table.float=TRUE, caption = "Table Floated (longtable)", label = "tab:fit1.t4")
@

As an alternative, in the following code we do not request a float
to be created. After creating the table in the file named ``\code{tmpout/fit1.t5.tex}'',
we use LaTeX commands to manually create the float that appears in
Table \ref{tab:fit1.t5}. After creating the floating table, inside
it we simply use the LaTeX code 

\inputencoding{latin9}\begin{lstlisting}
\input{tmpout/fit1.t5.tex}.
\end{lstlisting}
\inputencoding{utf8}
<<results=tex>>=
##columnLabels
fit1.t5 <- semTable(fit1, fits = c("chisq", "rmsea"), paramSets = c("loadings"),  columns = c("est", "se", "p"), columnLabels = c(se = "S.E."), file = file.path(tempdir, "fit1.t5"), print.results = FALSE)
@

\begin{table}

\caption{A Manually Created Floating Table\label{tab:fit1.t5}}

\input{tmpout/fit1.t5.tex}

\end{table}

\section{Fine tuning titles}

We've already emphasized the ability to customize variable labels.
Now we focus on column names as well as parameter sets. The ability
to adjust both the column names and parameter section names is emphasized
in Table \ref{tab:fit1.t6}.

<<labl100, results=tex>>=
##columnLabels
fit1.t6 <- semTable(list("A Fancy Fitted Model" = fit1), fits = c("chisq", "rmsea"), paramSets = c("loadings"), paramSetLabels = c("loadings" = "Loading Estimates(ML robust)"), columns = c("estsestars"), columnLabels = c("estsestars" = "Estimates(Std.Errors)"), file = file.path(tempdir, "fit1.t6"), table.float=TRUE, caption="Demonstrate Flexibility with Column and Parameter Set Labels", label = "tab:fit1.t6")
@

The names of the latent variables will default to the names used in
the lavaan model file. Those names, however, can be replaced in the
variable label vector. See Table \ref{tab:fit1.t7}.

<<labl110, results=tex>>=
## Test alternative latent variable labels
vl <- c(vlabs, visual = "Seeing", textual = "Thumb Texting", speed = "Speed")
fit1.t7 <- semTable(fit1, fits = c("chisq", "rmsea"), paramSets = c("loadings", "intercepts"),  columns = c("eststars", "p"), columnLabels = c("eststars" = "Est(SE)"), file = file.path(tempdir, "fit1.t7"), varLabels = vl, longtable = TRUE, type = "latex", table.float=TRUE, caption="Variable Labels can include parameter sections", label = "tab:fit1.t7")
@

The ability to fine-tune the selection and labels for fit values is
demonstrated in Table \ref{tab:fit1.t8}.

<<labl30, results=tex>>=
fit4.t2 <- semTable(fit1, paramSets = c("loadings"), fits = c("rmsea", "cfi", "chisq"), fitLabels = c(rmsea = "Root M.SQ.E.A", cfi = "CompFitIdx", chisq = "chisq"), type = "latex", table.float = TRUE, caption = "Customized Fits and Labels", label = "tab:fit1.t8")
@

\section{Two/Multi Group Models}

A model that estimates parameters for a two group model, using school
as the grouping model, is obtained with lavaan as follows:

<<grps200>>=
if(file.exists("fit1.g.rds")){
	fit1.g <- readRDS("fit1.g.rds")
} else {
    fit1.g <- cfa(HS.model, data = HolzingerSwineford1939, std.lv = TRUE, group = "school", estimator = "MLR")
    saveRDS(fit1.g, "fit1.g.rds")
}
@

A table that displays both groups can be obtained, as illustrated
in Table \ref{tab:fit1.gt1}. This table runs into the margins unless
we specify \code{longtable = TRUE}. Also it is worth noting that
the table does not fit within the allowed horizontal space if we try
to print the 4 standard columns individually. Hence, we use the more
compact ``Est(Std.Err.)'' format.

<<grps210, results=tex>>=
## 2 groups table
fit1.gt1 <- semTable(fit1.g, columns = c("estsestars", "p"), columnLabels = c(estsestars = "Est(Std.Err.)", p = "p-value"), file = file.path(tempdir, "fit1.gt1"), table.float = TRUE, caption = "A Two Group Model", label = "tab:fit1.gt1", longtable=TRUE)
@

It is not necessary to display all of the groups in the table. It
is possible to select groups by name, as we see in Table \ref{tab:fit1.gt2}.

<<grps220, results=tex>>=
## Now name particular group by name
fit1.gt2 <- semTable(fit1.g, columns = c("estsestars", "p"), paramSets = c("loadings", "intercepts", "residualvariances"), columnLabels = c(estsestars = "Est w/stars", p = "p-value"), file = file.path(tempdir, "fit1.gt2"), groups = "Pasteur", table.float = TRUE, caption = "Group 'Pasteur' Group from the 2 Model", label = "tab:fit1.gt2")
@

It is also possible to select groups by integer numbers in the group
list, rather than by name. The results for group 1 are offered in
Table \ref{tab:fit1.gt3}.

<<grps220, results=tex>>=
## Name particular group by number
fit1.gt3 <- semTable(fit1.g, columns = c("estsestars", "p"), paramSets = c("loadings"), columnLabels = c(estsestars = "Est w/stars", p = "p-value"), file = file.path(tempdir, "fit1.gt3"), groups = 2, table.float = TRUE, caption = "Group '2' from the 2 Model is 'Grant-White'", label = "tab:fit1.gt3")
@

\section{Two Models Side-by-Side}

One might wonder if the ``standardized'' SEM estimates are substantively
different from the original estimates. With lavaan, we can refit the
original CFA model and specify that we want standardized latent and
observed variables, along with estimates of a mean structure.

<<sbs10>>=
if(file.exists("fit1.std.rds")){
	fit1.std <- readRDS("fit1.std.rds")
} else {
    fit1.std <- update(fit1, std.lv = TRUE, std.ov = TRUE, meanstructure = TRUE) 
    saveRDS(fit1.std, "fit1.std.rds")
}
@

The two models are presented in Table \ref{tab:fit1.t2}. We combine
the estimates and standard errors into one column in order to improve
the chances that the table stays within the margins. Nevertheless,
the right side is well into the margin.

<<sbs20, results=tex>>=
# include 2 models in table request
fit1.t2 <- semTable(list("Ordinary" = fit1, "Standardized" = fit1.std), columns=c("estse", "z", "p"), file = file.path(tempdir, "fit1.2.1"), table.float = TRUE, longtable = TRUE, caption = "Ordinary and Standardized CFA Estimates", label = "tab:fit1.t2")
@

In the present case, it is perhaps not needed to display p values
on the standardized model estimates, so we might economize on horizontal
space by keeping just the estimates from the standardized model. To
demonstrate the fact that it is possible to select different columns
for the two models, we offer Table \ref{tab:fit1.t2.2}.

<<sbs30, results=tex>>=
fit1.t2.2 <- semTable(list("Ordinary" = fit1, "Standardized" = fit1.std), columns = list("Ordinary" = c("estse", "z", "p"), "Standardized" = c("estse")), columnLabels = c(estse = "Est(S.E.)", z = "Z", se = "SE"), file = file.path(tempdir, "fit1.t2.2"), table.float = TRUE, longtable = TRUE, caption = "Customizing Column Selections by Model", label = "tab:fit1.t2.2" )
@

\section{Larger Models}

The structural equation model (SEM) introduces a regression relationship
between the latent variables. In \code{lavaan}, the regression relationships
are introduced by the same notation as regression in linear models.

<<sem00>>=
regmodel1 <- 'visual  =~ x1 + x2 + x3 
             textual =~ x4 + x5 + x6
             speed   =~ x7 + x8 + x9
             visual ~ textual + speed
'
@

<<sem10>>=
if(file.exists("fit2.rds")){
	fit2 <- readRDS("fit2.rds")
} else {
    fit2 <- sem(regmodel1, data = HolzingerSwineford1939, std.lv = FALSE, meanstructure = TRUE)
    saveRDS(fit2, "fit2.rds")
}
@

<<sem20>>=
if(file.exists("fit2.std.rds")){
	fit2.std <- readRDS("fit2.std.rds")
} else {
    fit2.std <- update(fit2, std.lv = TRUE, std.ov = TRUE, meanstructure = TRUE)
    saveRDS(fit2.std, "fit2.std.rds")
}
@

A table comparing the standardized with the non-standardized models
is offered in Table \ref{tab:fit2.t}.

<<results=tex>>=
fit2.t <- semTable(list("Ordinary" = fit2, "Standardized" = fit2.std), fits = "rmsea", columns = list("Ordinary" = c("est", "se", "p"), "Standardized" = c("estsestars")), columnLabels = c("est" = "Est", "se" = "Std.Err.", "p" = "p", "estsestars" = "Standardized Est."), paramSets = c("loadings", "intercepts", "slopes", "latentcovariances"), file = file.path(tempdir, "fit2.t1"), type = "latex", table.float = TRUE, longtable = TRUE, caption = "SEM, Standardized or Not", label = "tab:fit2.t")
@

<<>>=
# Change output format to csv
cat(markupConvert(attr(fit2.t, "markedResults"), type = "csv"), file = file.path(tempdir, "fit2.t.converted.csv"))
cat(markupConvert(attr(fit2.t, "markedResults"), type = "html"), file = file.path(tempdir, "fit2.t.converted.html"))
@

It is not necessary to have all of the same relationships estimated
in every model. To demonstrate that, we estimate a second structural
equation with some indicators removed and also we have a different
regression relationship.

<<results=tex>>=
regmodel2 <- 'visual  =~ x1 + x2 + x3
              textual =~ x4 +  x6
              speed   =~  x8 + x9
              visual ~ speed
              textual ~ speed 
'
@

<<sem110>>=
if(file.exists("fit3.rds")){
	fit3 <- readRDS("fit3.rds")
} else {
    fit3 <- sem(regmodel2, data = HolzingerSwineford1939, std.lv = TRUE,  meanstructure = TRUE)
    saveRDS(fit3, "fit3.rds")
}

if(file.exists("fit3.std.rds")){
	fit3.std <- readRDS("fit3.std.rds")
} else {
    fit3.std <- update(fit3, std.lv = TRUE, std.ov = TRUE)
    saveRDS(fit3.std, "fit3.std.rds")
}
@

See Table \ref{tab:fit3.std.t1} for output from the following, which
combines four model columns. Note that the result table handles the
problem that some estimates are not included in each model.

<<fit3.std.t1, results=tex>>=
fit3.std.t1 <- semTable(list("Mod 1" = fit2, "Mod 1 std" = fit2.std, "Mod 2" = fit3, "Mod 3 std" = fit3.std), paramSets = c("loadings", "slopes", "intercepts", "residualvariances", "latentvariances", "latentcovariances"),  columns = c("estsestars"), type = "latex", file = file.path(tempdir, "fit3.std.t1"), table.float = TRUE, longtable = TRUE, caption = "Several SEMs with Differing Parameters", label = "tab:fit3.std.t1")
@

SEM estimates can also be obtained for the two group model, as illustrated
in Table \ref{tab:fit3.g2}:

<<results=tex>>=
<<sem200>>=
if(file.exists("fit3.g2.rds")){
	fit3.g2 <- readRDS("fit3.g2.rds")
} else {
    fit3.g2 <- sem(regmodel1, data = HolzingerSwineford1939, group = "school")
    saveRDS(fit3.g2, "fit3.g2.rds")
}
#

<<results=tex>>=
fit3.g2.2 <- semTable(fit3.g2, paramSets = c("loadings", "slopes", "intercepts"), columns = c("estsestars"), fits = c("chisq", "rmsea", "cfi"), type = "latex", file = file.path(tempdir, "fit3.g2"), table.float=TRUE, longtable=TRUE, caption = "SEM with Two Groups", label = "tab:fit3.g2")
@

\section*{Mediation Model}

There seems to be an unwritten rule in SEM that all tutorials must
use, for at least one model, Bollen's famous data set about industrialization
and democracy. We'll use that data for a model with mediation. We'll
make this interesting by calculating one set of ML estimates for the
standard errors and one bootstrapped set.

<<sem500>>=
## Model 5 - Mediation model with equality constraints
model5 <-
    '
    # latent variable definitions
    ind60 =~ x1 + x2 + x3
    dem60 =~ y1 + e*y2 + d*y3 + y4
    dem65 =~ y5 + e*y6 + d*y7 + y8
    # regressions
    dem60 ~ a*ind60
    dem65 ~ c*ind60 + b*dem60
    # residual correlations
    y1 ~~ y5
    y2 ~~ y4 + y6
    y3 ~~ y7
    y4 ~~ y8
    y6 ~~ y8

    # indirect effect (a*b)
    ## := operator defines new parameters
    ab := a*b

    ## total effect
    total := c + (a*b)
    '
@

Because this model can take a while to estimate, we use the saved
copies if they are available.

<<sem510>>=
if(file.exists("fit5.rds")){
	fit5 <- readRDS("fit5.rds")
} else {
    fit5 <- sem(model5, data=PoliticalDemocracy)
    saveRDS(fit5, "fit5.rds")
}

if(file.exists("fit5boot.rds")){
	fit5boot <- readRDS("fit5boot.rds")
} else {
    fit5boot <- sem(model5, data=PoliticalDemocracy, se = "bootstrap", bootstrap = 500)
    saveRDS(fit5boot, "fit5boot.rds")
}
@

The ML and bootstrapped estimates are compared in Table \ref{tab:fit5t2}.

<<sem520,results=tex>>=
fit5.t2 <- semTable(list("ML estimates" = fit5, "Bootstrapped SE" = fit5boot), columns = c("estsestars", "rsquare"), file = file.path(tempdir, "fit5.2"), type = "latex", longtable = TRUE, table.float = TRUE, caption = "Comparing ML and Bootstrapped Estimates", label = "tab:fit5t2")
@

Now we remove some indicators from the model and re-fit. The results
are presented in Table \ref{tab:fit5.5b}.

<<sem530>>=
##'
## Model 5b - Revision of Model 5s
model5b <-
    '
    # Cut some indicators from the measurement model
    ind60 =~ x1 + x2 
    dem60 =~ y1 + e*y2 + d*y3 + y4
    dem65 =~ y5 + e*y6 + d*y7 
    # regressions
    dem60 ~ a*ind60
    dem65 ~ c*ind60 + b*dem60
    # cut out the residual correlations
    # indirect effect (a*b)
    ## := operator defines new parameters
    ab := a*b
    ## total effect
    total := c + (a*b)
    '
@

Again, we use the saved fits, or if they are unavailable, we re-calculate.

<<sem550>>=
if(file.exists("fit5b.rds")){
	fit5b <- readRDS("fit5.rds")
} else {
    fit5b <- sem(model5b, data=PoliticalDemocracy, se = "bootstrap", bootstrap = 500)
    saveRDS(fit5b, "fit5b.rds")
}
@

<<results=tex>>=
fit5.5b <- semTable(list("Model 5" = fit5boot, "Model 5b" = fit5b), columns = c("estsestars", "rsquare"), file = file.path(tempdir, "fit5.5"), type = "latex", longtable = TRUE, table.float = TRUE, caption = "Models 5 and 5b", label = "tab:fit5.5b")
@


\section{Conclusion}

The \code{semTable} function is, to our knowledge, the first effort
successful effort to create a flexible function to present various
kinds of \code{lavaan} estimates of confirmatory factor analyses
and structural equation models. This version includes the ability
of authors to select parameter sets, output columns, fit indices,
as well as to customize many of the labels. 

This document is not intended as a lesson in structural equation modeling.
Instead, we offer it as evidence that the \code{semTable} function
does work, as promised, for a wide variety of contexts.

\bibliographystyle{apalike2}
\phantomsection\addcontentsline{toc}{section}{\refname}\bibliography{R}


\section*{Replication Information\label{sec:Session-Info}}

Please leave this next code chunk if you are producing a guide document. 

<<sessioninfo, echo=FALSE>>=
sessionInfo()
if(!is.null(warnings())){
    print("Warnings:")
    warnings()}
@

<<RoptionsRestore, include=FALSE, results=hide, echo=FALSE>>=
## Don't delete this. It puts the interactive session options
## back the way they were. If this is compiled within a session
## it is vital to do this.
options(opts.orig)
par(par.orig)
@
\end{document}
